generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  sessions        Session[]
  accounts        Account[]
  Sprite          Sprite[]
  Icon            Icon[]
  favourites      Favourite[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Favourite {
  id        String   @id @default(uuid())
  userId    String
  spriteId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sprite    Sprite   @relation(fields: [spriteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, spriteId])
}

model Sprite {
  id            String      @id @default(uuid())
  name          String
  description   String?
  category      String
  tags          String[]
  downloadCount Int         @default(0)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  icons         Icon[]
  favourites    Favourite[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Icon {
  id       String  @id @default(uuid())
  name     String
  svg      String
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  spriteId String?
  sprite   Sprite? @relation(fields: [spriteId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
